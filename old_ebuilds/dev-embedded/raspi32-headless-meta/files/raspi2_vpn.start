#!/bin/bash
# raspi2_vpn.start   joe brendler
# Check services, temp; Initialize, blink, and then light my LED on GPIO pins
# requires dev-libs/pigpio::gentoo
# rev 13 October 2023 - remove vpn and add iface
# rev 03 January 2024 - add vpn back in; rewritten for libgpiod (gpioset)
# rev 07 January 2024 - backported from raspi5_vpn.start for pi3/4
#
cputempfile=/sys/class/thermal/thermal_zone0/temp
vcgencmdfile=/usr/bin/vcgencmd
pi2_temp_watch_program=/usr/local/sbin/pi2_temp_watch_for_led
pi2_svc_watch_program=/usr/local/sbin/pi2_svc_watch_for_led
pi2_vpn_watch_program=/usr/local/sbin/pi2_vpn_watch_for_led

TEMP_LED=4            # raspi gpio pin 4 (Temp LED)(red)
SVC_LED=3             # raspi gpio pin 3 (Servoces LED)(yellow)
NET_LED=2             # raspi gpio pin 2 (Network LED)(green)
#GPIO_CHIP=4           # gpiochip number for libgpiod (gpioset)
GPIO_CHIP=0           # backported from pi5 (this is the only difference #1)
networkstatus=$FALSE  # set on check
servicestatus=$FALSE  # set on check
timeout=1000          # s wait to timeout in get_ip()
count=0               # loop cycles waited so far in get_ip()
countwait=1           # s wait during get_ip()
twait=10              # s wait between operations
blinkwait=0.05        # s wait during fluttler blink
blinklongwait=0.5     # s wait during blink between flutters
temp_threshold=60     # deg celcius above which to consider cpu to be hot
TRUE=0
FALSE=

#DO_VPN=$FALSE       # if using a vpn...
DO_VPN=$TRUE       # if using a vpn... "overwrite" NET status with VPN status

iface=wlan0
#iface=eth0

arg=""; ip_address=""; class_c=""; resolveconf_file="";  #initialize null

#-----[ functions ]-----------------------------------
get_ip() {
  while [[ ! ${ip_address} ]] && [[ ${count} -lt ${timeout} ]]
  do
    blink_light ${TEMP_LED}
    blink_light ${SVC_LED}
    blink_light ${NET_LED}
    # wait for inet (ipv4) address to be available, and then assign it to ip_address
    ip_address=$(ifconfig ${iface} | grep 'inet ' | sed 's/^[[:space:]]*//' | cut -d' ' -f2)
    sleep ${countwait}
    let count++
  done
  if [[ ${count} -lt ${timeout} ]]
  then
    networkstatus=$TRUE
    class_c=$(echo $ip_address | cut -d'.' -f1,2,3)
  else
    networkstatus=$FALSE
  fi
}

light_off() {
  gpioset -c${GPIO_CHIP} -t0 ${1}=0
}

light_on() {
  gpioset -c${GPIO_CHIP} -t0 ${1}=1
}

blink_light() {
  # blink and then light my LED (on pin designated by arg 1 $1 )
  LED=$1
  for ((i=0;i<5;i++))       # blink on-off 5 times, quickly
  do
    light_on ${LED}
    sleep ${blinkwait}
    light_off ${LED}
    sleep ${blinkwait}
  done
}

c_to_f() {
  tc="$1"
  tf=$(echo "scale=2;((9/5) * $tc) + 32" |bc)
  echo $tc\??C \($tf\??F\)
}

#-----[ main ]-----------------------------------

killall pi2_temp_watch_for_led  # kill any residual temp-watch (if run interactively)
killall pi2_svc_watch_for_led   # kill any residual svc-watch (if run interactively)
killall pi2_vpn_watch_for_led   # kill any residual vpn-watch (if run interactively)

# initialize gpio pins for LEDs
for x in ${TEMP_LED} ${NET_LED} ${SVC_LED}; do light_off $x; done
get_ip
echo "ip_address:  [${ip_address}]"
echo "class c...: ${class_c}"
[[ ${networkstatus} ]] && blink_light ${NET_LED} && light_on ${NET_LED} && echo "[ Network status ok ]" || \
         echo "[ Network status not ok !! ]"

case ${class_c} in
  "192.168.66") arg="l";;
  *) arg="r";;
esac

case ${arg} in
  "l") resolveconf_file="/root/bin/resolv.conf.local";;
  "r") resolveconf_file="/root/bin/resolv.conf.remote";;
  *)   resolveconf_file="/root/bin/resolv.conf.good";;
esac

## preserve the right resolv.conf, check service status
echo -n "will now copy [ ${resolveconf_file} ] to /etc/resolv.conf... "
chattr -i /etc/resolv.conf && \
  cp ${resolveconf_file} /etc/resolv.conf && \
  chattr +i /etc/resolv.conf
[[ $? ]] && echo "[ set resolv.conf ok ]" || echo "[ failure setting resolv.conf !! ]"

## check service; [[ true only if all services are "started" ]], and
##  if success, then blink/light LED
echo -n "Now delay and then check services..."
sleep ${twait} && [[ ! $(rc-status | grep '\[' | grep -v started) ]]
servicestatus=$?
[[ ${servicestatus} ]] && blink_light ${SVC_LED} && light_on ${SVC_LED} && echo "[ Services all ok ]" || \
         echo "[ Services not all ok !! ]"

# check temp immediately
echo "Now check temperature and launch background temperature monitor..."
cpu_temp=$(cat ${cputempfile} 2>/dev/null)
[[ ${cpu_temp:0:2} -ge ${temp_threshold} ]] && light_on ${TEMP_LED} || light_off ${TEMP_LED}

# now launch pi2_temp_watch in backbround
${pi2_temp_watch_program} ${temp_threshold} &

# now launch pi2_svc_watch in backbround
${pi2_svc_watch_program} &

# start the vpn, light LED if all OK
if [[ $DO_VPN ]]
then
  echo -n "Now delay and then start vpn..." && sleep ${twait} && \
  /usr/local/sbin/startvpn ${arg} && \
  blink_light ${VPN_LED} && light_on ${VPN_LED} && \
  echo "[ VPN ok ]" || echo "[ VPN failed !! ]"
  # now launch pi2_vpn_watch in backbround
  ${pi2_vpn_watch_program} &
fi
