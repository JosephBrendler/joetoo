#!/bin/bash
# kernelupdate -- Joe Brendler 11 May 2024
# adapted from kernelupdate-dom0 of October 2021,
#   makeU-distrib-tar of February 2022, and
#   installU_onServer of February 2022
# generalized from kernelupdate-embedded, to build kernels for SBCs *or xen domU/dom0 May 2024
#
#    *** Note: to have a build-host build a kernel for itself, use model=dom0 ***
#    *** (i.e. dom0 output is NOT cross-compiled and is installed at default  ***
#    ***  locations: /boot for kernel; /lib/modules/<version> for modules,    ***
#    ***  no device tree blobs (.dtb/.dtbo) are built for dom0 *(or domU),    ***
#    ***  and no ebuild is created for a dom0 product (unlike other models)   ***
#
# Interactively issue the sequence of commands that accomplishes a kernel update for (e.g.) tinkerboard
#
# this process assumes you have already cloned/linked the kernel sources and seeded build dir with .config
# first run creates directory structure
#
# To build cross compiler
# crossdev --clean --target armv7a-unknown-linux-gnueabihf
# crossdev --b ~2.40 --g ~12.3 --k ~2.37 --l ~6.1 --target armv7a-unknown-linux-gnueabihf
# may need to first run nodist_path and preface above with FEATURES=${FEATURES}" -distcc"
#
#-----[ example retrieve kernel sources ]---------------------------------------
# git clone https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
# cd linux
# git branch --list --remotes
# git branch --show-current
# git checkout linux-6.4.y
#-----[ Fetch Tinkerboard default kernel config ]------------------------
# curl -L https://raw.githubusercontent.com/TinkerBoard/debian_kernel/develop/arch/arm/configs/min>
#-----[ configure kernel ]-----------------------------------------------
# make ARCH=arm miniarm-rk3288_defconfig -j16
# make ARCH=arm menuconfig -j16
# cp .config /home/joe/My_${model}_project/build/${model}/.config-6.4.y-baseline
#
# see also instructions at /etc/kernelupdate/README-instructions
#

source /usr/local/sbin/script_header_brendlefly

#---[ local variables ]-------------------------------------------------------
BUILD="0.2.9-20240517"

eval $( grep ^PORTDIR /etc/portage/make.conf )
eval $( grep ^PKGDIR /etc/portage/make.conf )
eval $( grep ^DISTDIR /etc/portage/make.conf )

# default configuration (/etc/kernelupdate.conf will over-write and override)
VERBOSE=$TRUE
verbosity=3

user="joe"
makeopts=" -j9 -l5"
features=" -userpriv -distcc -distcc-pump"
arch="arm"
cross_compile="armv7a-unknown-linux-gnueabihf-"
model="rk3288-tinker-s"
image="zImage"
kernel="kernel7.img"
dtb_folder=""
build_root="/home/joe/My_${model}_project"
my_devel_dir="/home/joe/myUtilities"
my_ebuild_dir="/home/joe/joetoo/sys-kernel"
host_dir=${build_root}/"domU_kernel_images"

# source kernelupdate.conf in order to load customized settings
#   check each setting below to assign, if needed
#   Note: kernelupdate.conf in /etc/kernelupdate/ will override one in pwd
[[ -e kernelupdate.conf ]] && \
    source kernelupdate.conf && \
    CONF_DIR=$PWD"/kernelupdate.conf"
[[ -e /etc/kernelupdate/kernelupdate.conf ]] && \
    source /etc/kernelupdate/kernelupdate.conf && \
    CONF_DIR="/etc/kernelupdate/kernelupdate.conf"

# append "/" to dtb_folder if missing and not null
( [[ ${#dtb_folder} -gt 0 ]] && [[ ! "${dtb_folder: -1}" == "/" ]] ) && dtb_folder+="/"

# you should not need to edit anything below this point
sources_dir="${build_root}/linux"
config_dir="${build_root}/kernelconfigs"
build_dir="${build_root}/build"
status_file="${build_dir}/status"
model_dir="${build_dir}/${model}"
model_config="${model_dir}/.config"
kernel_basename="linux-${model}_kernel_image"
distrib_dir="${model_dir}/tmp/distrib"
lib_dir="${distrib_dir}/lib"
boot_dir="${distrib_dir}/boot"
module_dir=""  # to be set after make modules_install

# create the build directory structure if it does not exist (-p makes parents)
[[ ! -d "${build_root}" ]]         && mkdir -pv -m 755 "${build_root}"          && chown ${user}:${user} "${build_root}"
[[ ! -d "${config_dir}" ]]         && mkdir -pv -m 755 "${config_dir}"          && chown ${user}:${user} "${config_dir}"
[[ ! -d "${build_dir}" ]]          && mkdir -pv -m 755 "${build_dir}"           && chown ${user}:${user} "${build_dir}"
[[ ! -d "${model_dir}" ]]          && mkdir -pv -m 755 "${model_dir}"           && chown ${user}:${user} "${model_dir}"

# create the staging directory structure if it does not exist
[[ ! -d "${distrib_dir}" ]]        && mkdir -pv -m 755 "${distrib_dir}"         && chown ${user}:${user} "${distrib_dir}"
[[ ! -d "${lib_dir}" ]]            && mkdir -pv -m 755 "${lib_dir}"             && chown ${user}:${user} "${lib_dir}"
[[ ! -d "${boot_dir}" ]]           && mkdir -pv -m 755 "${boot_dir}"            && chown ${user}:${user} "${boot_dir}"
[[ ! -d "${host_dir}" ]]           && mkdir -pv -m 755 "${host_dir}"            && chown ${user}:${user} "${host_dir}"

# set up the cross-building make command for sbcs or domU
make_model="MAKEOPTS="
make_model+="\"${makeopts}\" "
make_model+=" FEATURES="
make_model+="\"${features}\" "
make_model+="make O=${model_dir}/ ARCH=${arch} CROSS_COMPILE=${cross_compile} "

# set up the host build command for dom0
make0="MAKEOPTS="
make0+="\"${makeopts}\" "
make0+=" FEATURES="
make0+="\"${features}\" "
make0+="make O=${model_dir}/ "

# pick one of the above based on model selection
[ "${model}" == "dom0" ] && make_me="${make0}" || make_me="${make_model}"

# get and set version number and name
old_dir=$PWD
message "Old pwd: ${old_dir}" && cd ${sources_dir} && message "Now working in $PWD"
version_number=$(eval ${make_me} -s kernelversion)
d_message "version_number: ${version_number}" 3
kernel_image_name="${kernel_basename}-${version_number}"

devel_dir="${my_devel_dir}"
ebuild_dir="${my_ebuild_dir}/${kernel_basename}"
publish_tarball_cmd_file="${build_dir}/publish_tarball_${kernel_image_name}"
publish_ebuild_cmd_file="${build_dir}/publish_ebuild_${kernel_image_name}"
[[ ! -d "${ebuild_dir}" ]] &&  mkdir -pv -m 755 "${ebuild_dir}" && chown ${user}:${user} "${ebuild_dir}"
d_message "done auto-configure" 3

command_sequence=(
'backup_config'
'make_mrproper'
'cp -v ${config_dir}/.config.bak ${model_config}'
'eval ${make_me} prepare'
'eval ${make_me} oldconfig'
'eval ${make_me} menuconfig'
'save_new_config'
'eval ${make_me} ${image}'
'eval ${make_me} modules'
'make_dtbs'
'clean_distrib_dirs'
'install_kernel'
'install_modules'
'install_dtbs'
'make_tarball'
'publish_tarball'
'publish_ebuild'
)
d_message "done setting command sequence" 3

#-----[ functions ]--------------------------------------------------
make_mrproper() {
  # clean up both the sources and build directories
  message "Now working in $PWD (should be sources directory)"
  clean_make_me="MAKEOPTS=\"${makeopts}\" FEATURES=\"${features}\" "
  clean_make_me+="make ARCH=${arch} CROSS_COMPILE=${cross_compile} "
  d_message "Cleaning sources directory [ ${sources_dir} ] ..." 1
  eval ${clean_make_me} mrproper
  d_message "Cleaning ${model} build directory [ ${model_dir} ] ..." 1
  eval ${make_me} mrproper
}

new_prompt()        # set external variable $answer based on reponse to prompt $1
{ ps=$1; echo; echo; CUU; SCP; message_n "$ps [Yes/no/skip|Yns]: " && read answer; # '=~' not in busybox
while ! expr "${answer:0:1}" : [yYnNsS] >/dev/null;  # answer not a regex match
do RCP; echo -en "$(repeat ' ' $(termwidth))";  ## blank the line
RCP; message_n "$ps [Yes/no/skip|Yns]: " && read answer; done; }

display_config()
{
message "${BMon}Current Configuration:${Boff}"
d_message "${LBon}..........CONF_DIR=[${BWon}$CONF_DIR${LBon}]${Boff}" 1
separator "From Config File"
d_message "${LBon}..............ARCH=[${BWon}$arch${LBon}]${Boff}" 1
d_message "${LBon}.....cross_compile=[${BWon}$cross_compile${LBon}]${Boff}" 1
d_message "${LBon}.............model=[${BWon}$model${LBon}]${Boff}" 1
d_message "${LBon}.............image=[${BWon}$image${LBon}]${Boff}" 1
d_message "${LBon}............kernel=[${BWon}$kernel${LBon}]${Boff}" 1
d_message "${LBon}........dtb_folder=[${BWon}$dtb_folder${LBon}]${Boff}" 1
d_message "${LBon}........build_root=[${BWon}$build_root${LBon}]${Boff}" 1
separator "Auto-configured"
d_message "${LBon}....version_number=[${BWon}$version_number${LBon}]${Boff}" 1
d_message "${LBon}.......sources_dir=[${BWon}$sources_dir${LBon}]${Boff}" 1
d_message "${LBon}........config_dir=[${BWon}$config_dir${LBon}]${Boff}" 1
d_message "${LBon}.........build_dir=[${BWon}$build_dir${LBon}]${Boff}" 1
d_message "${LBon}.........model_dir=[${BWon}$model_dir${LBon}]${Boff}" 1
d_message "${LBon}......model_config=[${BWon}$model_config${LBon}]${Boff}" 1
d_message "${LBon}.......distrib_dir=[${BWon}$distrib_dir${LBon}]${Boff}" 1
d_message "${LBon}...........lib_dir=[${BWon}$lib_dir${LBon}]${Boff}" 1
d_message "${LBon}..........boot_dir=[${BWon}$boot_dir${LBon}]${Boff}" 1
d_message "${LBon}..........host_dir=[${BWon}$host_dir${LBon}]${Boff}" 1
d_message "${LBon}...kernel_basename=[${BWon}$kernel_basename${LBon}]${Boff}" 1
d_message "${LBon}.kernel_image_name=[${BWon}$kernel_image_name${LBon}]${Boff}" 1
d_message "${LBon}.........devel_dir=[${BWon}$devel_dir${LBon}]${Boff}" 1
d_message "${LBon}........ebuild_dir=[${BWon}$ebuild_dir${LBon}]${Boff}" 1
d_message "${LBon}..     status_file=[${BWon}$status_file${LBon}]${Boff}" 1
d_echo
d_message "${LBon}..publish_tarball_cmd_file=[${BWon}$publish_tarball_cmd_file${LBon}]${Boff}" 1
d_message "${LBon}...publish_ebuild_cmd_file=[${BWon}$publish_ebuild_cmd_file${LBon}]${Boff}" 1
d_echo
d_message "${LBon}........make_me='${BWon}$make_me${LBon}'${Boff}" 1
}

backup_config() {
  if [[ -f ${model_config} ]]
  then
    cp -v ${model_config} ${config_dir}/.config.bak
  else
    msg="Config file [ ${model_config} ] not found.\n"
    msg+="${BYon} Please put a .config file in model build directory [ ${model_dir} ],\n"
    msg+=" or manually run an appropriate \"make xxx_defconfig\" command in model build directory${Boff}"
    E_message "$msg"
    exit
  fi
}

save_new_config() {
  cp -v ${model_config} ${config_dir}/.config.${model}-${version_number}
}

make_dtbs() {
  # make dtbs for this model SBC, if this is not a dom0 or domU build
  [ ! "${model:0:3}" == "dom" ] && eval "${make_me} dtbs"
}

clean_distrib_dirs()
{
  message "${LBon}Cleaning the distribution staging directory...${Boff}"
  for x in $lib_dir $boot_dir
  do
    [[ -d $x ]] && find $x -mindepth 1 -iname '*' -delete
  done
}

install_kernel()
{
  # stage kernel
  cd ${sources_dir} && message "Now working in $PWD"
  message "${LBon}Installing the kernel ...${Boff}"
  case ${model:0:3} in
    # if this is a dom0 kernel, install to /boot as usual
    "dom0" ) eval "${make_me} install" ;;
    # if this is a domU kernel, install to host_dir (xen host use for guests) and boot_dir for tarball
    "domU" ) eval "INSTALL_PATH=${host_dir} ${make_me} install" ;
             eval "INSTALL_PATH=${boot_dir} ${make_me} install" ;;
    # otherwise (SBC kernel), install to boot_dir for tarball
    *      ) eval "INSTALL_PATH=${boot_dir} ${make_me} install" ;;
  esac
}

install_modules()
{
  # stage modules
  cd ${sources_dir} && message "Now working in $PWD"
  message "${LBon}Installing modules ...${Boff}"
  # if this is a dom0 kernel then install modules to /lib/modules, as usual, otherwise stage them for tarball
  if [ "${model}" == "dom0" ] ; then
    eval "${make_me} modules_install"
  else
    eval "${make_me} INSTALL_MOD_PATH=${distrib_dir} modules_install"

    # identify the new module directory
    module_dir=$( basename $( find ${lib_dir}/modules/  -maxdepth 1  -iname ${version_number}*  -type d ) )

    # fix the build and source symlinks
    message "${LBon}Fixing the ${lib_dir}/modules/${module_dir}/build symlink...${Boff}"
    cd ${lib_dir}/modules/${module_dir} && message "Now working in $PWD"
    rm -v build 2>/dev/null
    ln -snfv /usr/src/linux build
    message "${LBon}Fixing the ${lib_dir}/modules/${module_dir}/source symlink...${Boff}"
    rm -v source 2>/dev/null
    ln -snfv /usr/src/linux source
  fi
  cd $old_dir && message "Now working in $PWD"
}

install_dtbs()
{
    cd ${sources_dir} && message "Now working in $PWD"
    message "${LBon}Installing device tree and overlay (.dtb and .dtbo) files ...${Boff}"
    mkdir -p ${boot_dir}/dts
    eval "${make_me} INSTALL_DTBS_PATH=${boot_dir}/dts dtbs_install"
    # copy the one dtb file we need up to boot
    message "${LBon}Staging the dtb file...${Boff}"
    cp -av ${boot_dir}/dts/${dtb_folder}${model}.dtb ${boot_dir}/
    message "${LBon}Staging the overlay folder...${Boff}"
    mv -v ${boot_dir}/dts/overlays ${boot_dir}/
}

make_tarball()
{
    message "${BGon}Entering $distrib_dir${Boff}"
    cd $distrib_dir
    d_message "pwd: $(pwd)" 2

    # create staged tar archive
    message "${LBon}Creating the tar archive ...${Boff}"

    # create tarball from staged contents; don't include kernel sources
    tar_command="tar "
    tar_command+="  --exclude lib/modules/${module_dir}/source/"
#  tar_command+="  --exclude lib/firmware"
    tar_command+="  -cvjf ${kernel_image_name}.tar.bz2 ./boot ./lib"
    eval $tar_command && \
    message "${BYon}Complete.  Your tarball is located in the ${LBon}${distrib_dir}${BYon} directory${Boff}" || \
    E_message "${BRon}Something went wrong -- refer to output above${Boff}"
    cd $old_dir && message "Now working in $PWD"
}

publish_tarball() {
    echo; message "copying package ${distrib_dir}/${kernel_image_name}.tar.bz2 to ${devel_dir}/"
    cp -v ${distrib_dir}/${kernel_image_name}.tar.bz2 ${devel_dir}/
    message "changing ownership for upload"
    chown ${user}:${user} ${devel_dir}/${kernel_image_name}.tar.bz2

    cd ${old_dir} && message "Now working in $PWD"
    echo; message "Building publish_tarball_cmd_file [ ${publish_tarball_cmd_file} ]..."
    echo "cd ${devel_dir}/" > ${publish_tarball_cmd_file}
    echo "echo new PWD: \${PWD}" >> ${publish_tarball_cmd_file}
    echo "git pull" >> ${publish_tarball_cmd_file}
    echo "git status" >> ${publish_tarball_cmd_file}
    echo "git add ${kernel_image_name}.tar.bz2" >> ${publish_tarball_cmd_file}
    echo "git commit -m \"adding ${kernel_image_name}\"" >> ${publish_tarball_cmd_file}
    echo "git push origin master" >> ${publish_tarball_cmd_file}
    echo  >> ${publish_tarball_cmd_file}

    cd ${old_dir} && message "Now working in $PWD"
    separator "contents of ${publish_tarball_cmd_file}... " $(hostname)
    cat ${publish_tarball_cmd_file}
    separator "setting permissions on ${publish_tarball_cmd_file}... " $(hostname)
    chown joe:joe ${publish_tarball_cmd_file}
    chmod +x ${publish_tarball_cmd_file}

    sudo -u ${user} ${publish_tarball_cmd_file}
}

publish_ebuild() {
    echo; message "Building publish_ebuild_cmd_file [ ${publish_ebuild_cmd_file} ]..."

    echo "cd ${ebuild_dir}/" >> ${publish_ebuild_cmd_file}
    echo "echo new PWD: \${PWD}" >> ${publish_ebuild_cmd_file}
    ebuild_list=()

    for x in $(find ${ebuild_dir} -type f -iname "linux-*" | sort)
    do
    ebuild_list+=("${x}")
    done
    old_version=$(echo ${ebuild_list[$((${#ebuild_list[@]}-1))]} | sed "s|${ebuild_dir}/${kernel_basename}-||" | sed 's|.ebuild||')
    echo "old version: ${old_version}"
    echo "new version: ${version_number}"

    echo "cp ${ebuild_dir}/${kernel_basename}-${old_version}.ebuild ${ebuild_dir}/${kernel_image_name}.ebuild" >> ${publish_ebuild_cmd_file}
    #next no longer needed - ebuild now uses ${PV}, so it just needs to be named right
    #echo "sed -i \"s|${old_version}|${version_number}|\" ${ebuild_dir}/${kernel_image_name}.ebuild" >> ${publish_ebuild_cmd_file}
    echo "rm ${ebuild_dir}/Manifest" >> ${publish_ebuild_cmd_file}
    echo "pkgdev manifest -f -d ${DISTDIR}" >> ${publish_ebuild_cmd_file}
    echo "git pull" >> ${publish_ebuild_cmd_file}
    echo "git status" >> ${publish_ebuild_cmd_file}
    echo "git add Manifest" >> ${publish_ebuild_cmd_file}
    echo "git add ../../metadata/md5-cache/sys-kernel/${kernel_image_name}" >> ${publish_ebuild_cmd_file}
    echo "git add ${kernel_image_name}.ebuild" >> ${publish_ebuild_cmd_file}
    echo "git commit -m \"adding ${kernel_image_name}\"" >> ${publish_ebuild_cmd_file}
    echo "git push origin master" >> ${publish_ebuild_cmd_file}

    cd ${old_dir} && message "Now working in $PWD"
    separator "contents of ${publish_ebuild_cmd_file}... " $(hostname)
    cat ${publish_ebuild_cmd_file}
    separator "setting permissions on ${publish_ebuild_cmd_file}... " $(hostname)
    chown joe:joe ${publish_ebuild_cmd_file}
    chmod +x ${publish_ebuild_cmd_file}

    sudo -u ${user} ${publish_ebuild_cmd_file}
}

usage() {
  message "Usage: kernelupdate [-s|-r]"
  message "  -s | --status --> return status (next step, step_number)"
  message "  -r | --resume --> resume proccessing (with next step, from statusfile)"
  message "  -[0-18]       --> resume proccessing (with next step, [0-18])"
  echo
  message "${BYon}Command sequence steps:${Boff}"
  for ((s=0; s<${#command_sequence[@]}; s++))
  do
    echo -e "    ${LBon}${s}: ${command_sequence[$s]}${Boff}"
  done
  exit
}

make_sources_message() {
# pull text from /etc/kernelupdate/README-instructions
# ignore lines beginning with two #s (i.e. "##"
# echo lines beginning with one "#" in light blue
# ehco other lines in bright white
#
while read line
do
  if [ "${line:0:1}" == "#" ]
  then
    [ "${line:1:1}" == "#" ] && break || echo -en ${LBon}
  else
    echo -en ${BWon}
  fi
  echo ${line}
done < $(dirname ${CONF_DIR})/README-instructions
#done < /etc/kernelupdate/README-instructions
echo -e ${Boff}

}

#-----[ main script ]------------------------------------------------
checkroot
separator "kernelupdate-${BUILD}"
starting_step=0

[[ $# -gt 1 ]] && E_message "Invalid Arguments" && usage

[[ $# -eq 1 ]] && case $1 in
  "-s" | "--status" )
      message "${BYon}reading status file: [ ${BWon}${status_file}${BYon}  ]${Boff}"
      read starting_step < ${status_file};
      message "${BWon}Status: Step $(($starting_step - 1)) complete; next step would be [ ${BMon}$starting_step${BWon} ] ( ${BGon}${command_sequence[starting_step]}${BWon} )${Boff}";
      exit;
      ;;
  "-r" | "--resume" )
      message "${BYon}reading status file: [ ${BWon}${status_file}${BYon}  ]${Boff}"
      read starting_step < ${status_file};
      message "${BWon}Resuming at step [ ${BMon}$starting_step${BWon} ] ( ${BGon}${command_sequence[starting_step]}${BWon} )${Boff}";
      ;;
  "-"[0-9]|"-"1[0-8] )   # currently there are steps 0-18
      message "${BYon}setting next step ${1:1}${Boff}"
      let starting_step=${1:1};
      message "${BWon}Resuming at step [ ${BMon}$starting_step${BWon} ] ( ${BGon}${command_sequence[starting_step]}${BWon} )${Boff}";
      ;;
  *             )
      # default - error
      E_message "Error: bad argument [ $1 ]";
      usage;
      ;;
esac


display_config
sh_countdown 4

answer=""
if [[ $starting_step -eq 0 ]]
then
  if [[ ! -e "${sources_dir}" ]]
  then
    make_sources_message
    exit
  else
    prompt "${BYon}Starting kernelupdate.\n Please confirm configuration above.\n${LBon}Continue? ${Boff}?"
    [[ ! $answer == [Yy] ]] && exit
  fi
else
  do_first_prompt="${BMon}Resuming at step [ ${BWon}$starting_step${BMon} ] ( ${BGon}${command_sequence[starting_step]}${BMon} )${Boff}\n"
  do_first_prompt+="${BYon}Please verify configuration above.${Boff}"
  prompt "${do_first_prompt}\n${LBon} Continue? ${Boff}?"
  [[ ! $answer == [Yy] ]] && exit
fi

#  source joetoo's custom setnodistpath tool, to drop distcc and ccache from PATH
message "${BMon}About to source ${BGon}setnodistpath${BMon} ..."
source /usr/local/sbin/setnodistpath && echo "PATH:  $PATH"
echo
for ((step_number=${starting_step}; step_number<${#command_sequence[@]}; step_number++))
do
  d_message "Writing step_number [ $step_number ] to status_file ( $status_file )" 2
  echo $step_number > ${status_file}
  # skip device tree steps for dom0 or domU builds
  if [ "${model:0:3}" == "dom" ] && [ "${command_sequence[step_number]:(-4)}" == "dtbs" ]
  then
    let step_number++
  else
    # skip "publish" and "make_tarball" steps for dom0 builds
    if [ "${model:0:4}" == "dom0" ] && \
          ( [ "${command_sequence[step_number]:0:3}" == "pub" ] || \
            [ "${command_sequence[step_number]:(-7)}" == "tarball" ] )
    then
      let step_number++
    else
      answer=""
      new_prompt "${BMon}Are you ready to run ${BGon}\"${command_sequence[step_number]}\"${BMon}?${Boff}"
      case $answer in
        [Yy] )  # execute this command and continue
          message "${LBon}About to run \"${BYon}${command_sequence[step_number]}${LBon}\"...${Boff}" ; \
          eval ${command_sequence[step_number]}; right_status $? ;;
        [Ss] ) ;; # skip this command and continue
        *    )  # abort due to negative answer
          message "${BRon}As instructed, not running ${BGon}\"${command_sequence[step_number]}\"${BRon}. Quitting...${Boff}" ; \
          exit ;;
      esac
    fi
  fi
done
final_msg="${BMon}${image}, modules, and dtb file for ${model} successfully staged in\n"
final_msg+="${build_dir}/${model} and published in ${kernel_image_name}.ebuild${Boff}"
message "${final_msg}"
