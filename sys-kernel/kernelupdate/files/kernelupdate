#!/bin/bash
# kernelupdate -- Joe Brendler 11 May 2024
# adapted from kernelupdate-dom0 of October 2021,
#   makeU-distrib-tar of February 2022, and
#   installU_onServer of February 2022
# generalized from kernelupdate-embedded, to build kernels for SBCs *or xen domU/dom0 May 2024
#
# 24 July 2024 - first test edit in vscode (rewrite for non-interactive option, etc)
#
#    *** Note: to have a build-host build a kernel for itself, use model=dom0 ***
#    *** (i.e. dom0 output is NOT cross-compiled and is installed at default  ***
#    ***  locations: /boot for kernel; /lib/modules/<version> for modules,    ***
#    ***  no device tree blobs (.dtb/.dtbo) are built for dom0 *(or domU),    ***
#    ***  and no ebuild is created for a dom0 product (unlike other models)   ***
#
# Interactively issue the sequence of commands that accomplishes a kernel update for (e.g.) tinkerboard
#
# this process assumes you have already cloned/linked the kernel sources and seeded build dir with .config
# first run creates directory structure
#
# To build cross compiler
# crossdev --clean --target armv7a-unknown-linux-gnueabihf
# crossdev --b ~2.40 --g ~12.3 --k ~2.37 --l ~6.1 --target armv7a-unknown-linux-gnueabihf
# may need to first run nodist_path and preface above with FEATURES=${FEATURES}" -distcc"
#
#-----[ example retrieve kernel sources ]---------------------------------------
# git clone https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
# cd linux
# git branch --list --remotes
# git branch --show-current
# git checkout linux-6.4.y
#-----[ Fetch Tinkerboard default kernel config ]------------------------
# curl -L https://raw.githubusercontent.com/TinkerBoard/debian_kernel/develop/arch/arm/configs/min>
#-----[ configure kernel ]-----------------------------------------------
# make ARCH=arm miniarm-rk3288_defconfig -j16
# make ARCH=arm menuconfig -j16
# cp .config /home/joe/My_${model}_project/build/${model}/.config-6.4.y-baseline
#
# see also instructions at /etc/kernelupdate/README-instructions
#
# see also https://www.raspberrypi.com/documentation/computers/linux_kernel.html
#

#---[ execute setup and initialization, as required ]-------------------------
source /usr/local/sbin/script_header_brendlefly

# local variables
BUILD="0"

eval $( grep ^PORTDIR /etc/portage/make.conf )
eval $( grep ^PKGDIR /etc/portage/make.conf )
eval $( grep ^DISTDIR /etc/portage/make.conf )

# default configuration (/etc/kernelupdate.conf will over-write and override)
VERBOSE=$TRUE
verbosity=1

# initialize local variables to default values (override with .conf and/or command line)
user="joe"
makeopts=" -j9 -l5"
features=" -userpriv -distcc -distcc-pump"
arch="arm"
cross_compile="armv7a-unknown-linux-gnueabihf-"
model="rk3288-tinker-s"
image="zImage"
kernel="kernel7.img"
dtb_folder="rockchip"
overlay_folder="rockchip/overlay"
build_root="/home/joe/My_${model}_project"
my_devel_dir="/home/joe/myUtilities"
my_devel_dir_credentials="/home/joe/myUtilities/.git/.credentials"
my_ebuild_dir="/home/joe/joetoo/sys-kernel"
my_ebuild_dir_credentials="/home/joe/joetoo/.git/.credentials"
host_dir=${build_root}/"domU_kernel_images"
INTERACTIVE=${FALSE}
RESUME=${FALSE}
starting_step=0
answer=""
newanswer=""
SSH_AUTH_SOCK="/home/joe/.ssh/ssh-agent.sock"

# previous version loaded ssh keys here, but they were later unaccessible to other shells
# this now build into "publish" script

#  source joetoo's custom setnodistpath tool, to drop distcc and ccache from PATH
message "${BMon}About to source ${BGon}setnodistpath${BMon} ..."
source /usr/local/sbin/setnodistpath && echo "PATH:  $PATH"
echo

# source the current build number, assuming it was properly generated during ebuild deployment
[[ -e /etc/kernelupdate/BUILD ]] && source /etc/kernelupdate/BUILD

# source kernelupdate.conf in order to load customized settings
#   check each setting below to assign, if needed
#   Note: kernelupdate.conf in /etc/kernelupdate/ will override one in pwd
[[ -e kernelupdate.conf ]] && \
    source kernelupdate.conf && \
    CONF_DIR=$PWD"/kernelupdate.conf"
[[ -e /etc/kernelupdate/kernelupdate.conf ]] && \
    source /etc/kernelupdate/kernelupdate.conf && \
    CONF_DIR="/etc/kernelupdate/kernelupdate.conf"

# append "/" to dtb_folder and overlay_folder if missing and not null
( [[ ${#dtb_folder} -gt 0 ]] && [[ ! "${dtb_folder: -1}" == "/" ]] ) && dtb_folder+="/"
( [[ ${#overlay_folder} -gt 0 ]] && [[ ! "${overlay_folder: -1}" == "/" ]] ) && overlay_folder+="/"

# you should not need to edit anything below this point
sources_dir="${build_root}/linux"
config_dir="${build_root}/kernelconfigs"
build_dir="${build_root}/build"
status_file="${build_dir}/status"
model_dir="${build_dir}/${model}"
model_config="${model_dir}/.config"
kernel_basename="linux-${model}_kernel_image"
distrib_dir="${model_dir}/tmp/distrib"
lib_dir="${distrib_dir}/lib"
boot_dir="${distrib_dir}/boot"
module_dir=""  # to be set after make modules_install

# create the build directory structure if it does not exist (-p makes parents)
[[ ! -d "${build_root}" ]]         && mkdir -pv -m 755 "${build_root}"          && chown ${user}:${user} "${build_root}"
[[ ! -d "${config_dir}" ]]         && mkdir -pv -m 755 "${config_dir}"          && chown ${user}:${user} "${config_dir}"
[[ ! -d "${build_dir}" ]]          && mkdir -pv -m 755 "${build_dir}"           && chown ${user}:${user} "${build_dir}"
[[ ! -d "${model_dir}" ]]          && mkdir -pv -m 755 "${model_dir}"           && chown ${user}:${user} "${model_dir}"

# create the staging directory structure if it does not exist
[[ ! -d "${distrib_dir}" ]]        && mkdir -pv -m 755 "${distrib_dir}"         && chown ${user}:${user} "${distrib_dir}"
[[ ! -d "${lib_dir}" ]]            && mkdir -pv -m 755 "${lib_dir}"             && chown ${user}:${user} "${lib_dir}"
[[ ! -d "${boot_dir}" ]]           && mkdir -pv -m 755 "${boot_dir}"            && chown ${user}:${user} "${boot_dir}"
[[ ! -d "${host_dir}" ]]           && mkdir -pv -m 755 "${host_dir}"            && chown ${user}:${user} "${host_dir}"

# set up the cross-building make command for sbcs or domU
make_model="MAKEOPTS="
make_model+="\"${makeopts}\" "
make_model+=" FEATURES="
make_model+="\"${features}\" "
make_model+="make O=${model_dir}/ ARCH=${arch} CROSS_COMPILE=${cross_compile} "

# set up the host build command for dom0
make0="MAKEOPTS="
make0+="\"${makeopts}\" "
make0+=" FEATURES="
make0+="\"${features}\" "
make0+="make O=${model_dir}/ "

# pick one of the above based on model selection
[ "${model}" == "dom0" ] && make_me="${make0}" || make_me="${make_model}"

# get and set kernel version number and image name
old_dir=$PWD
message "Old pwd: ${old_dir}" && cd ${sources_dir} && message "Now working in $PWD"
### This change was un-necessary -- undo it
version_number=$(eval ${make_me} -s kernelversion)
# dom0/domU using gentoo-sources, will get version line "X.Y.Z-gentoo"
#   but for domU, I don't want the "-gentoo" part, so strip it
[ "${model}" == "domU" ] && \
    version_number="${version_number/-gentoo/}"
d_message "version_number: ${version_number}" 3
kernel_image_name="${kernel_basename}-${version_number}"

devel_dir="${my_devel_dir}"
ebuild_dir="${my_ebuild_dir}/${kernel_basename}"
publish_tarball_cmd_file="${build_dir}/publish_tarball_${kernel_image_name}"
publish_ebuild_cmd_file="${build_dir}/publish_ebuild_${kernel_image_name}"
[[ ! -d "${ebuild_dir}" ]] &&  mkdir -pv -m 755 "${ebuild_dir}" && chown ${user}:${user} "${ebuild_dir}"
d_message "done setup and auto-configure" 3

# 20240724 - removed 'publish_ebuild' from sequence; now using consolidated linux-joetoo-kernelupdate.${PV}.ebuild
command_sequence=(
'backup_config'
'make_mrproper'
'cp -v ${config_dir}/.config.bak ${model_config}'
'eval ${make_me} oldconfig'
'eval ${make_me} prepare'
'eval ${make_me} menuconfig'
'save_new_config'
'eval ${make_me}'
'clean_distrib_dirs'
'install_kernel'
'install_modules'
'install_dtbs'
'make_tarball'
'publish_tarball'
'publish_ebuild'
)
#### 'publish_ebuild'
d_message "done setting command sequence" 3

#-----[ functions ]--------------------------------------------------

make_mrproper() {
  # clean up both the sources and build directories
  message "Now working in $PWD (should be sources directory)"
  clean_make_me="MAKEOPTS=\"${makeopts}\" FEATURES=\"${features}\" "
  clean_make_me+="make ARCH=${arch} CROSS_COMPILE=${cross_compile} "
  d_message "Cleaning sources directory [ ${sources_dir} ] ..." 1
  eval ${clean_make_me} mrproper
  d_message "Cleaning ${model} build directory [ ${model_dir} ] ..." 1
  eval ${make_me} mrproper
}

backup_config() {
  if [[ -f ${model_config} ]]
  then
    cp -v ${model_config} ${config_dir}/.config.bak
  else
    msg="Config file [ ${model_config} ] not found.\n"
    msg+="${BYon} Please put a .config file in model build directory [ ${model_dir} ],\n"
    msg+=" or manually run an appropriate \"make xxx_defconfig\" command in model build directory${Boff}"
    E_message "$msg"
    exit
  fi
}

save_new_config() {
  cp -v ${model_config} ${config_dir}/.config.${model}-${version_number}
}

# leaving this here for reference, but it is depracated, since I now
# build all targets (kernel images, modules, and dtbs) with # eval "${make_me}"
make_dtbs() {
  # make dtbs for this model SBC, if this is not a dom0 or domU build
  [ ! "${model:0:3}" == "dom" ] && eval "${make_me} dtbs"
}

clean_distrib_dirs()
{
  message "${LBon}Cleaning the distribution staging directory...${Boff}"
  for x in $lib_dir $boot_dir
  do
    [[ -d $x ]] && find ${x%/}/ -mindepth 1 -iname '*' -delete
  done
  message "${LBon}Cleaning the tarball and ebuild publishing directory...${Boff}"
  find ${distrib_dir} -iname '*.tar.bz2' -delete
  find ${build_dir} -mindepth 1 -maxdepth 1 -iname 'publish*' -delete
  message "${BYon}Contents of ${distrib_dir} --"
  message "${BWon} --[ Should contain only empty boot and lib dirs ]-- ${Boff}"
  tree -L 2 ${distrib_dir%/}/
}

verify_boot_mount() {
  # if boot needs to be mounted, ensure it is, or try to mount it...
  if grep -v '^#' /etc/fstab | grep boot >/dev/null 2>&1  && \
    ! grep "/boot" /proc/mounts >/dev/null 2>&1
  then
    message "/boot is not mounted, trying to mount it now..."
    ! $(mount /boot) && \
     ( E_message "Failed to mount /boot" ; exit 1 ) || \
      message "Succeeded in mounting /boot ; continuing..."
  else
    message "Verified /boot is mounted ; continuing..."
  fi
}

install_kernel()
{
  # stage kernel
  cd ${sources_dir} && message "Now working in $PWD"
  message "${LBon}Installing the kernel ...${Boff}"
  case ${model} in
    # if this is a dom0 kernel, install to /boot as usual (ensure it is mounted)
    "dom0" ) verify_boot_mount && eval "${make_me} install" ;;
    # if this is a domU kernel, install to host_dir (xen host use for guests) and boot_dir for tarball
    "domU" ) eval "INSTALL_PATH=${host_dir} ${make_me} install" ;
             eval "INSTALL_PATH=${boot_dir} ${make_me} install" ;;
    # Otherwise (SBC kernel), install to boot_dir for tarball.  Don't just use make install;
    #   also copy the proper image manually to the proper deployed kernel name
    *      ) eval "INSTALL_PATH=${boot_dir} ${make_me} install" ;
             cp -av ${model_dir}/arch/${arch}/boot/${image} \
                 ${boot_dir}/${kernel}-${version_number};;
  esac
}

install_modules()
{
  # stage modules
  cd ${sources_dir} && message "Now working in $PWD"
  message "${LBon}Installing modules ...${Boff}"
  # if this is a dom0 kernel then install modules to /lib/modules, as usual, otherwise stage them for tarball
  if [ "${model}" == "dom0" ] ; then
    eval "${make_me} modules_install"
  else
    eval "${make_me} INSTALL_MOD_PATH=${distrib_dir} modules_install"

    # identify the new module directory
    module_dir=$( basename $( find ${lib_dir}/modules/  -maxdepth 1  -iname ${version_number}*  -type d ) )

    # fix the build and source symlinks
    message "${LBon}Fixing the ${lib_dir}/modules/${module_dir}/build symlink...${Boff}"
    cd ${lib_dir}/modules/${module_dir} && message "Now working in $PWD"
    rm -v build 2>/dev/null
    ln -snfv /usr/src/linux build
    message "${LBon}Fixing the ${lib_dir}/modules/${module_dir}/source symlink...${Boff}"
    rm -v source 2>/dev/null
    ln -snfv /usr/src/linux source
  fi
  cd $old_dir && message "Now working in $PWD"
}

install_dtbs()
{
    # note - dtb_folder and overlay_folder are relative to build/${model}/arch/${ARCH}/boot/dts/
    cd ${sources_dir} && message "Now working in $PWD"
    message "${LBon}Installing device tree and overlay [.dtb and .dtbo] files ...${Boff}"
    mkdir -p ${boot_dir}/dts/${dtb_folder}
    eval "${make_me} INSTALL_DTBS_PATH=${boot_dir%/}/dts/${dtb_folder%/}/ dtbs_install"
    message "In case of error in dtbs_install, will try to manually copy ..."
    # manually install dtb files from dtb_folder (omit subdirectories like "overlays")
    for file in $(find ${model_dir%/}/arch/${arch}/boot/dts/${dtb_folder%/}/ -maxdepth 1 -mindepth 1 -type f -iname '*.dtb' -or -iname 'README*')
    do cp -av ${file} ${boot_dir%/}/dts/${dtb_folder%/}/ ; done
    # manually install dtbo files from overlay_folder (omit .tmp, .cmd files, and omit subdirectories for now)
    mkdir -p ${boot_dir%/}/dts/${overlay_folder%/}/
    for file in $(find ${model_dir%/}/arch/${arch}/boot/dts/${overlay_folder%/}/ -maxdepth 1 -mindepth 1 -type f -iname '*.dtb*' -and -not -iname '\.*')
    do cp -av ${file} ${boot_dir%/}/dts/${overlay_folder%/}/ ; done
    # copy the overlay_folder's README file(s) if it/they exist(s)
    for file in $(find ${model_dir%/}/arch/${arch}/boot/dts/${overlay_folder%/}/ -maxdepth 1 -type f -iname 'README*')
    do cp -av ${file} ${boot_dir%/}/dts/${overlay_folder%/}/ ; done
    # copy the one dtb file we need up to boot
    message "${LBon}Staging the dtb file for tarball ...${Boff}"
    cp -av ${boot_dir%/}/dts/${dtb_folder%/}/${model}.dtb ${boot_dir%/}/
}

make_tarball()
{
    message "${BGon}Entering $distrib_dir${Boff}"
    cd $distrib_dir
    d_message "pwd: $(pwd)" 2

    # create staged tar archive
    message "${LBon}Creating the tar archive ...${Boff}"

    # create tarball from staged contents; don't include kernel sources
    tar_command="tar "
    tar_command+="  --exclude lib/modules/${module_dir}/source/"
#  tar_command+="  --exclude lib/firmware"
    tar_command+="  -cvjf ${kernel_image_name}.tar.bz2 ./boot ./lib"
    eval $tar_command && \
    message "${BYon}Complete.  Your tarball is located in the ${LBon}${distrib_dir}${BYon} directory${Boff}" || \
    E_message "${BRon}Something went wrong -- refer to output above${Boff}"
    cd $old_dir && message "Now working in $PWD"
}

publish_tarball() {
    echo; message "copying package ${distrib_dir}/${kernel_image_name}.tar.bz2 to ${devel_dir}/"
    cp -v ${distrib_dir}/${kernel_image_name}.tar.bz2 ${devel_dir}/
    message "changing ownership for upload"
    chown ${user}:${user} ${devel_dir}/${kernel_image_name}.tar.bz2

    cd ${old_dir} && message "Now working in $PWD"

    echo; message "Building publish_tarball_cmd_file [ ${publish_tarball_cmd_file} ]..."
    # first command uses single ">", to initialize the file; then others use ">>"
    echo "#!/bin/bash" > ${publish_tarball_cmd_file}
    # set SSH_AUTH_SOCK env var to a fixed value
    echo 'export SSH_AUTH_SOCK="'"${SSH_AUTH_SOCK}"'"' >> ${publish_tarball_cmd_file}
    # test whether ${SSH_AUTH_SOCK} is valid
    echo "ssh-add -l 2>/dev/null >/dev/null" >> ${publish_tarball_cmd_file}
    # if not valid, then start ssh-agent using ${SSH_AUTH_SOCK}
    echo '[ $? -ge 2 ] && ssh-agent -a ${SSH_AUTH_SOCK} >/dev/null' >> ${publish_tarball_cmd_file}
    echo "echo 'ssh-agent added, listing keys ...'" >> ${publish_tarball_cmd_file}
    # list ssh keys. Note: this method depends on users .bashrc to have loaded them, if not, then do it here
    echo "ssh-add -l" >> ${publish_tarball_cmd_file}
    # source github credentials to format the git push command and identify keys to load
    echo "source ${my_devel_dir_credentials}" >> ${publish_tarball_cmd_file}
    # check for ssh keys, and add if they are not already loaded
    [[ -z $(ssh-add -l | grep -v "no identities") ]] && ssh-add ${gitsshkey}
    # now do git pull, push, push using ssh key
    echo "echo" >> ${publish_tarball_cmd_file}
    echo "cd ${devel_dir}/" >> ${publish_tarball_cmd_file}
    echo "echo new PWD: \${PWD}" >> ${publish_tarball_cmd_file}
    echo "git pull" >> ${publish_tarball_cmd_file}
    echo "git status" >> ${publish_tarball_cmd_file}
    echo "git add ${kernel_image_name}.tar.bz2" >> ${publish_tarball_cmd_file}
    echo "git commit -m \"adding ${kernel_image_name}\"" >> ${publish_tarball_cmd_file}
    echo 'eval "git push git@github.com:${gituser}/${gitrepo}.git master"'  >> ${publish_tarball_cmd_file}
    echo 'git push' >> ${publish_tarball_cmd_file}
    echo  >> ${publish_tarball_cmd_file}

    cd ${old_dir} && message "Now working in $PWD"
    separator "contents of ${publish_tarball_cmd_file}... " $(hostname)
    cat ${publish_tarball_cmd_file}
    separator "setting permissions on ${publish_tarball_cmd_file}... " $(hostname)
    chown joe:joe ${publish_tarball_cmd_file}
    chmod +x ${publish_tarball_cmd_file}

    # now actually execute the publication by running the publication command file
    separator "now executing commands in ${publish_tarball_cmd_file}... " $(hostname)
    sudo -u ${user} ${publish_tarball_cmd_file}
}

publish_ebuild() {
    ## leaving this here, but not using - moved to consolidated sys-kernel/linux-joetoo-kernelimage
    # publish updated ebuild for domU or sbc kernels (dom0 don't need ebuilds)

    ebuild_list=()

    for x in $(find ${ebuild_dir} -type f -iname "linux-*" | sort)
    do
      ebuild_list+=("${x}")
    done
    old_version=$(echo ${ebuild_list[$((${#ebuild_list[@]}-1))]} | sed "s|${ebuild_dir}/${kernel_basename}-||" | sed 's|.ebuild||')
    echo "old version: ${old_version}"
    # ebuild naming syntax forbids the "-gentoo" in the image name, and domU using gentoo-sources will be named that way, so fix it
    if [ "${model}" == "domU" ]; then
      new_version="$(echo ${version_number} | sed 's/-gentoo//')"
      version_number="${new_version}"
      new_kernel_image_name="$(echo ${kernel_image_name} | sed 's/-gentoo//')"
      kernel_image_name="${new_kernel_image_name}"
    fi
    echo "new version: ${version_number}"
    echo; message "Building publish_ebuild_cmd_file [ ${publish_ebuild_cmd_file} ]..."
   # first command uses single ">", to initialize the file; then others use ">>"
    echo "#!/bin/bash" > ${publish_ebuild_cmd_file}
    # set SSH_AUTH_SOCK env var to a fixed value
    echo 'export SSH_AUTH_SOCK="'"${SSH_AUTH_SOCK}"'"' >> ${publish_ebuild_cmd_file}
    # test whether ${SSH_AUTH_SOCK} is valid
    echo "ssh-add -l 2>/dev/null >/dev/null" >> ${publish_ebuild_cmd_file}
    # if not valid, then start ssh-agent using ${SSH_AUTH_SOCK}
    echo '[ $? -ge 2 ] && ssh-agent -a ${SSH_AUTH_SOCK} >/dev/null' >> ${publish_ebuild_cmd_file}
    echo "echo 'ssh-agent added, listing keys ...'" >> ${publish_ebuild_cmd_file}
    # list ssh keys. Note: this method depends on users .bashrc to have loaded them, if not, then do it here
    echo "ssh-add -l" >> ${publish_ebuild_cmd_file}
    # source github credentials to format the git push command and identify keys to load
    echo "source ${my_ebuild_dir_credentials}" >> ${publish_ebuild_cmd_file}
    # check for ssh keys, and add if they are not already loaded
    [[ -z $(ssh-add -l | grep -v "no identities") ]] && ssh-add ${gitsshkey}
    # now do git pull, push, push using ssh key
    echo "echo" >> ${publish_ebuild_cmd_file}
    echo "cd ${ebuild_dir}/" >> ${publish_ebuild_cmd_file}
    echo "echo new PWD: \${PWD}" >> ${publish_ebuild_cmd_file}
    echo "git pull" >> ${publish_ebuild_cmd_file}
    echo "cp ${ebuild_dir}/${kernel_basename}-${old_version}.ebuild ${ebuild_dir}/${kernel_image_name}.ebuild" >> ${publish_ebuild_cmd_file}
    echo "rm ${ebuild_dir}/Manifest" >> ${publish_ebuild_cmd_file}
    echo "pkgdev manifest -f -d ${DISTDIR}" >> ${publish_ebuild_cmd_file}
    echo "git status" >> ${publish_ebuild_cmd_file}
    echo "git add Manifest" >> ${publish_ebuild_cmd_file}
    echo "git add ../../metadata/md5-cache/sys-kernel/${kernel_image_name}" >> ${publish_ebuild_cmd_file}
    echo "git add ${kernel_image_name}.ebuild" >> ${publish_ebuild_cmd_file}
    echo "git commit -m \"adding ${kernel_image_name}\"" >> ${publish_ebuild_cmd_file}
    echo 'eval "git push git@github.com:${gituser}/${gitrepo}.git master"'  >> ${publish_ebuild_cmd_file}
    echo 'git push' >> ${publish_ebuild_cmd_file}
    echo  >> ${publish_ebuild_cmd_file}

    cd ${old_dir} && message "Now working in $PWD"
    separator "contents of ${publish_ebuild_cmd_file}... " $(hostname)
    cat ${publish_ebuild_cmd_file}
    separator "setting permissions on ${publish_ebuild_cmd_file}... " $(hostname)
    chown joe:joe ${publish_ebuild_cmd_file}
    chmod +x ${publish_ebuild_cmd_file}

    # now actually execute the publication by running the publication command file
    separator "now executing commands in ${publish_ebuild_cmd_file}... " $(hostname)
    sudo -u ${user} ${publish_ebuild_cmd_file}
}

usage() {
  N=${#command_sequence[@]}
  separator "usage" "kernelupdate"
  E_message "Usage: kernelupdate [options]"
  message "  -i | --interactive --> run interactively; confirm execution of each step"
  message "  -n | --noninteractive --> run non-interactively; proceed automatically with each step"
  message "  -s | --status  --> return status (next step, step_number)"
  message "  -r | --resume  --> resume proccessing (with next step, from statusfile)"
  message "  -v | --verbose --> increase verbosity"
  message "  -q | --quiet   --> decrease verbosity"
  message "  -[0-${N}]      -->  save ${N} to status file and resume proccessing at step ${N}"
  echo
  message "${BMon}Note: single-character options may be combined. For example -${Boff}"
  message "  ${BGon}kernelupdate --verbose -nqr11${Boff}"
  message "  ${BYon}would ressume non-interactively at step 11 with normal verbosity${Boff}"
  echo
  message "${BYon}Command sequence steps:${Boff}"
  for ((s=0; s<${#command_sequence[@]}; s++))
  do
    echo -e "    ${LBon}${s}: ${command_sequence[$s]}${Boff}"
  done
  exit
}

new_prompt()        # set external variable $newanswer based on reponse to prompt $1
{ ps=$1; echo; echo; CUU; SCP; message_n "$ps [Yes/no/skip|Yns]: " && read newanswer; # '=~' not in busybox
while ! expr "${newanswer:0:1}" : [yYnNsS] >/dev/null;  # newanswer not a regex match
do RCP; echo -en "$(repeat ' ' $(termwidth))";  ## blank the line
RCP; message_n "$ps [Yes/no/skip|Yns]: " && read newanswer; done; }

display_config()
{
message "${BMon}Current Configuration:${Boff}"
d_message "${LBon}..........CONF_DIR=[${BWon}$CONF_DIR${LBon}]${Boff}" 1
separator "From Config File and/or command line" $(hostname)
d_message "${LBon}..............arch=[${BWon}$arch${LBon}]${Boff}" 1
d_message "${LBon}.....cross_compile=[${BWon}$cross_compile${LBon}]${Boff}" 1
d_message "${LBon}.............model=[${BWon}$model${LBon}]${Boff}" 1
d_message "${LBon}.............image=[${BWon}$image${LBon}]${Boff}" 1
d_message "${LBon}............kernel=[${BWon}$kernel${LBon}]${Boff}" 1
d_message "${LBon}........dtb_folder=[${BWon}$dtb_folder${LBon}]${Boff}" 1
d_message "${LBon}....overlay_folder=[${BWon}$overlay_folder${LBon}]${Boff}" 1
d_message "${LBon}........build_root=[${BWon}$build_root${LBon}]${Boff}" 1
d_message "${LBon}.......INTERACTIVE=[$(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${LBon}]${Boff}" 1
d_message "${LBon}............RESUME=[$(status_color ${RESUME})$(TrueFalse ${RESUME})${LBon}]${Boff}" 1
d_message "${LBon}.....starting_step=[${BWon}$starting_step${LBon}]${Boff}" 1
d_message "${LBon}...........VERBOSE=[$(status_color ${VERBOSE})$(TrueFalse ${VERBOSE})${LBon}]${Boff}" 1
d_message "${LBon}.........verbosity=[${BWon}$verbosity${LBon}]${Boff}" 1
d_echo 1
separator "Auto-configured" $(hostname)
d_message "${LBon}....version_number=[${BWon}$version_number${LBon}]${Boff}" 1
d_message "${LBon}.......sources_dir=[${BWon}$sources_dir${LBon}]${Boff}" 1
d_message "${LBon}........config_dir=[${BWon}$config_dir${LBon}]${Boff}" 1
d_message "${LBon}.........build_dir=[${BWon}$build_dir${LBon}]${Boff}" 1
d_message "${LBon}.........model_dir=[${BWon}$model_dir${LBon}]${Boff}" 1
d_message "${LBon}......model_config=[${BWon}$model_config${LBon}]${Boff}" 1
d_message "${LBon}.......distrib_dir=[${BWon}$distrib_dir${LBon}]${Boff}" 1
d_message "${LBon}...........lib_dir=[${BWon}$lib_dir${LBon}]${Boff}" 1
d_message "${LBon}..........boot_dir=[${BWon}$boot_dir${LBon}]${Boff}" 1
d_message "${LBon}..........host_dir=[${BWon}$host_dir${LBon}]${Boff}" 1
d_message "${LBon}...kernel_basename=[${BWon}$kernel_basename${LBon}]${Boff}" 1
d_message "${LBon}.kernel_image_name=[${BWon}$kernel_image_name${LBon}]${Boff}" 1
d_message "${LBon}.........devel_dir=[${BWon}$devel_dir${LBon}]${Boff}" 1
d_message "${LBon}........ebuild_dir=[${BWon}$ebuild_dir${LBon}]${Boff}" 1
d_message "${LBon}.......status_file=[${BWon}$status_file${LBon}]${Boff}" 1
d_echo 1
d_message "${LBon}..publish_tarball_cmd_file=[${BWon}$publish_tarball_cmd_file${LBon}]${Boff}" 1
d_message "${LBon}...publish_ebuild_cmd_file=[${BWon}$publish_ebuild_cmd_file${LBon}]${Boff}" 1
d_echo 1
d_message "${LBon}........make_me='${BWon}$make_me${LBon}'${Boff}" 1
}

make_sources_message() {
# pull text from /etc/kernelupdate/README-instructions
# ignore lines beginning with two #s (i.e. "##"
# echo lines beginning with one "#" in light blue
# ehco other lines in bright white
#
while read line
do
  if [ "${line:0:1}" == "#" ]
  then
    [ "${line:1:1}" == "#" ] && break || echo -en ${LBon}
  else
    echo -en ${BWon}
  fi
  echo ${line}
done < $(dirname ${CONF_DIR})/README-instructions
#done < /etc/kernelupdate/README-instructions
echo -e ${Boff}

}

process_command_line() {
# process command line arguments (for now only -x/--exclude option can have argument(s))
last=""
#d_message "processing command line with argument(s): [ ${*} ]" 2
d_message "processing command line with argument(s): [ ${@} ]" 2
# shift each argument into position $1 and examine it
#   process the argument or processit with its own arguments
while [ ! -z "$1" ]
do
  d_message "arg1 = [ $1 ]" 3
  # if arg begins with a single dash, process it alone
  if [ "${1:0:1}" == "-" ] && [ "${1:1:1}" != "-" ] ; then
    d_message "processing [ $1 ] alone as single-dash argument" 3
    process_argument $1
    shift
  # if arg begins with a double dash, process it alone
  elif [ "${1:0:2}" == "--" ] ; then
    d_message "processing [ $1 ] alone as double-dash argument" 3
    process_argument $1
    shift
  else
    d_message "does not start with - or --" 3
    usage; exit
  fi
done
d_message "done with process_command_line" 2
}

process_argument() {
  d_message "about to process argument(s): [ $* ]" 1
  d_message "1: [ $1 ], 2: [ $2 ]" 2
  # process command line argument (must be one of the following)
  [ ! -z "$1" ] && case "$1" in
    "-"[sS] | "--status"         )
      # display status
      message "${BYon}reading status file: [ ${BWon}${status_file}${BYon}  ]${Boff}"
      read starting_step < ${status_file};
      message "${BWon}Status: Step $(($starting_step - 1)) complete; next step would be [ ${BMon}$starting_step${BWon} ] --[ ${BGon}${command_sequence[${starting_step}]}${BWon} ]--${Boff}";
      exit;
      ;;
    "-"[rR] | "--resume"         )
      # resume at stored step unless that is overridden by a new start # (below)
      message "${BYon}reading status file: [ ${BWon}${status_file}${BYon}  ]${Boff}"
      RESUME=${TRUE}
      read starting_step < ${status_file};
      message "${BWon}Resuming at step [ ${BMon}$starting_step${BWon} ] --[ ${BGon}${command_sequence[${starting_step}]}${BWon} ]--${Boff}";
      ;;
    "-"[iI] | "--interactive"    )
      # interactive
      INTERACTIVE=${TRUE};
      message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}"
      ;;
    "-"[nN] | "--noninteractive" )
      # non-interactive
      INTERACTIVE=${FALSE}
      message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}"
      ;;
    "-"[qQ] | "--quiet"          )
      # decrease verbosity
      [[ ${verbosity} -gt 0 ]] && let verbosity--
      [[ ${verbosity} -eq 0 ]] && VERBOSE=${FALSE}
      message "${BYon}decreased verbosity: ${verbosity}${Boff}"
      ;;
    "-"[vV] | "--verbose"          )
      # increase verbosity
      [[ ${verbosity} -lt 6 ]] && let verbosity++
      VERBOSE=${TRUE}
      message "${BYon}increased verbosity: ${verbosity}${Boff}"
      ;;       # note: "numeric" args like -4 should fall through to this default
    *                            )
    process_compound_arg $1
      ;;
  esac
  d_message "done with process_argument" 1
}

process_compound_arg()
{
d_message "about to process compound argument(s): [ $* ]" 1
# must begin with a single dash
[ ! "${1:0:1}" == "-" ] && E_message "${E_BAD_ARGS}" && usage && exit 1
# must not begin with two dashes (would have been picked in process_argument)
[ "${1:0:2}" == "--" ] && E_message "${E_BAD_ARGS}" && usage && exit 1
# strip leading dash(es)
myargs=${1##-}
# handle remaining characters in sequence
while [ -n "${myargs}" ]
do
  #handle one character at at time, from the left
  case ${myargs:0:1} in
    [sS] )
      # display status
      message "${BYon}reading status file: [ ${BWon}${status_file}${BYon}  ]${Boff}"
      read starting_step < ${status_file};
      message "${BWon}Status: Step $(($starting_step - 1)) complete; next step would be [ ${BMon}$starting_step${BWon} ] ( ${BGon}${command_sequence[${starting_step}]}${BWon} )${Boff}";
      exit;
      ;;
    [rR] )
      # resume at stored step unless that is overridden by a new start # (below)
      message "${BYon}reading status file: [ ${BWon}${status_file}${BYon}  ]${Boff}"
      RESUME=${TRUE}
      read starting_step < ${status_file};
      message "${BWon}Resuming at step [ ${BMon}$starting_step${BWon} ] --[ ${BGon}${command_sequence[${starting_step}]}${BWon} ]--${Boff}";
      ;;
    [0-9] )
      # currently there are steps 0-13; if the next char is also numeric, append it and "shift"
      RESUME=${TRUE}
      starting_step="${myargs:0:1}";
      if [[ "${myargs:1:1}" == [0-9] ]] ; then
        starting_step="${myargs:0:2}";
        myargs=${myargs:1}
      fi
      message "${BYon}Saving next step ${BWon}${starting_step}${BYon} to status file [${Boff}${status_file}${BYon}]${Boff}"
      echo ${starting_step} > ${status_file};
      message "${BWon}Resuming at step [ ${BMon}${starting_step}${BWon} ] --[ ${BGon}${command_sequence[${starting_step}]}${BWon} ]--${Boff}";
      ;;
    [iI] )
      # interactive
      INTERACTIVE=${TRUE};
      message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}"
      ;;
    [nN] )
      # non-interactive
      INTERACTIVE=${FALSE}
      message "${BYon}setting INTERACTIVE: $(status_color ${INTERACTIVE})$(TrueFalse ${INTERACTIVE})${Boff}"
      ;;
    [qQ] )
      # decrease verbosity
      [[ ${verbosity} -gt 0 ]] && let verbosity--
      [[ ${verbosity} -eq 0 ]] && VERBOSE=${FALSE}
      message "${BYon}decreased verbosity: ${verbosity}${Boff}"
      ;;
    [vV] )
      # increase verbosity
      [[ ${verbosity} -lt 6 ]] && let verbosity++
      VERBOSE=${TRUE}
      message "${BYon}increased verbosity: ${verbosity}${Boff}"
      ;;       # note: "numeric" args like -4 should fall through to this default
    *   ) E_message "${E_BAD_ARGS}" && usage && exit 1
  esac
  #strip first char from myargs (i.e. "shift" one character)
  myargs=${myargs:1}
done
dmseg "done with process_compount_arg" 1
}

sanity_check() {
# veryfy the sanity of the combination of arguments on the command line
### this is carried over from jus example, but it is not used here (yet)

### posible future additional sanity checks like this...
#BOGUSTEST=${FALSE}
#[[ ! $INTERACTIVE ]] && [[ $RESUME ]] && [[ $BOGUSTEST ]] \
#   E_message "Dangerous option combination: noninteractive and resume" && \
#   usage && exit 1

answer=""
if [[ $starting_step -eq 0 ]]
then
  # if a sources directory has not been linked, advise the user about this
  if [[ ! -e "${sources_dir}" ]]
  then
    make_sources_message
    exit
  else
    # confirm the current configuration before executing main script
    prompt "${BYon}Starting kernelupdate.\n Please confirm configuration above.\n${LBon}Continue? ${Boff}?"
    [[ ! $answer == [Yy] ]] && exit
  fi
else
  # resume operation at some step other than 0
  do_first_prompt="${BMon}Resuming at step [ ${BWon}$starting_step${BMon} ] --[ ${BGon}${command_sequence[${starting_step}]}${BMon} ]--${Boff}\n"
  do_first_prompt+="${BYon}Please verify configuration above.${Boff}"
  prompt "${do_first_prompt}\n${LBon} Continue? ${Boff}?"
  [[ ! $answer == [yY] ]] && exit
fi
}


#-----[ main script ]------------------------------------------------
checkroot
separator "kernelupdate-${BUILD}" $(hostname)
starting_step=0

process_command_line "${@}"

display_config
sh_countdown 2

sanity_check


for ((step_number=${starting_step}; step_number<${#command_sequence[@]}; step_number++))
do
  d_message "Writing step_number [ $step_number ] to status_file ( $status_file )" 2
  echo $step_number > ${status_file}
  # skip device tree steps for dom0 or domU builds
  if [ "${model:0:3}" == "dom" ] && [ "${command_sequence[step_number]:(-4)}" == "dtbs" ]
  then
    # take no action; the loop will increment step counter on next entry
    d_message "dom0/domU do not have dtbs -- skipping this step" 2
  else
    # skip "publish" and "make_tarball" steps for dom0 builds
    if [ "${model}" == "dom0" ] && \
          ( [ "${command_sequence[step_number]:0:3}" == "pub" ] || \
            [ "${command_sequence[step_number]:(-7)}" == "tarball" ] )
    then
      # take no action; the loop will increment step counter on next entry
      d_message "dom0 install does not need a tarball -- skipping this step" 2
    else
      if [ "${command_sequence[step_number]}" == "publish_ebuild" ] && \
           [ ! "${model}" == "domU" ]
      then
        # currently, only domU gets its own ebuild published
        # take no action; the loop will increment step counter on next entry
        d_message "non-domU install does not get its own ebuild -- skipping this step" 2
      else
        if [[ ${INTERACTIVE} ]] ; then
          d_message "INTERACTIVE is true, will prompt before executing this step [ $step_number ]" 2
          newanswer=""
          # confirm user is ready/wants to run the next command
          new_prompt "${BMon}Are you ready to run ${BGon}${command_sequence[step_number]}${BMon}?${Boff}"
        elif [ ${step_number} -eq 5 ] ; then  # skip menuconfig for non-interactive
          message "INTERACTIVE is false; ${BMon}Skipping ${BGon}${command_sequence[step_number]}${BMon} as instructed ...${Boff}"
          newanswer="s"
        else  # automatically execute other steps for non-interactive
          d_message "INTERACTIVE is false; will automatically execute this step [ $step_number ]" 2
          message "${BMon}Beginning ${BGon}${command_sequence[step_number]}${BMon} as instructed ...${Boff}"
          newanswer="y"
        fi  ## interactive
        case $newanswer in
          [Yy] )  # execute this command and continue
            message "${LBon}About to run ${BYon}${command_sequence[step_number]}${LBon}...${Boff}" ; \
            eval ${command_sequence[step_number]}; right_status $? ;;
          [Ss] ) ;; # skip this command and continue
          *    )  # abort due to negative newanswer
            message "${BRon}As instructed, not running ${BGon}${command_sequence[step_number]}${BRon}. Quitting...${Boff}" ; \
            exit ;;
        esac
      fi  # only domU gets its own ebuild
    fi  # no publish or tarball for dom0
  fi # no dtbs for dom)/U
done
final_msg="${BMon}${image}, modules, and dtb file for ${model} successfully staged in\n"
final_msg+="${build_dir}/${model} and published in ${kernel_image_name}.ebuild${Boff}"
message "${final_msg}"
