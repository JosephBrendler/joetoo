#!/bin/bash
#  backport from Pi5 for tinkerboar, rock4cplus
#   (changes only GPIO_CHIP/PIN and watch progs)
TRUE=0
FALSE=
cputempfile=/sys/class/thermal/thermal_zone0/temp
temp_threshold=60  # deg celcius above which to consider cpu to be hot

# backport from Pi5 (this is the only change #2)
rock4_temp_watch_program=/usr/local/sbin/rock4_temp_watch_for_led
rock4_svc_watch_program=/usr/local/sbin/rock4_svc_watch_for_led
rock4_vpn_watch_program=/usr/local/sbin/rock4_vpn_watch_for_led

#TEMP_LED=4            # raspi gpio pin 4 (Temp LED)(red)
#SVC_LED=3             # raspi gpio pin 3 (Servoces LED)(yellow)
#NET_LED=2             # raspi gpio pin 2 (Network LED)(green)
TEMP_LED=4             # GPIO4_A4: chip 4, (A=0*8)+4=Line 4 (pin 36)
SVC_LED=6              # GPIO4_A6: chip 4, (A=0*8)+6=Line 6 (pin 38)
NET_LED=7              # GPIO4_A7: chip 4, (A=0*8)+7=Line 7 (pin 40)
GPIO_CHIP=4            # gpiochip number for libgpiod (gpioset)
#GPIO_CHIP=7           # (chip 7 on tinkerboard, 4 on rock4c)
blinkwait=0.05     # s wait during fluttler blink
blinklongwait=0.5  # s wait during blink between flutters
#VERBOSE=$FALSE
VERBOSE=$TRUE    # verbpse logging pm/off
verbosity=2     # 0: none; 1: restarts; 2: errors; 3: success; 4: dump vectors on restart

#PROG_NAME="pi5_temp_watch_for_led"
PROG_NAME=/usr/local/sbin/rock4_temp_watch_for_led

[[ $# -eq 0 ]] && echo "Missing argument. Please supply threshold temp." && exit
if [[ $1 -gt 0 ]] && [[ $1 -le 99 ]]
then
  temp_threshold=$1  # reassign. deg celcius above which to consider cpu to be hot
  echo "temp_threshold: ${temp_threshold}"
else
  echo "Bad argument. Please supply valid threshold temp. (0-99 C)"
  exit
fi

#-----[ functions ]---------------------------
light_off() {
  gpioset -c${GPIO_CHIP} -t0 ${1}=0
}

light_on() {
  gpioset -c${GPIO_CHIP} -t0 ${1}=1
}

blink_light() {
  # blink and then light my LED (on pin designated by arg 1 $1 )
  for ((i=0;i<10;i++))       # blink on-off 5 times, quickly
  do
    gpioset -c${GPIO_CHIP} -t0 ${1}=$(( $i % 2 ))
    sleep ${blinkwait}
  done
}

#-----[ main script ]-----------------------

light_off ${TEMP_LED}
sleep ${blinkwait}
blink_light ${TEMP_LED}

while [[ $TRUE ]]
do
  cpu_temp=$(cat ${cputempfile} 2>/dev/null)
  int_temp=${cpu_temp:0:2}
  if [[ ${int_temp} -ge ${temp_threshold} ]]
  then
    [[ $VERBOSE ]] && [[ verbosity -ge 2 ]] && \
      /usr/bin/logger -p cron.notice "${PROG_NAME} failure -- CPU Temp: ${int_temp} C [ > threshold: ${temp_threshold} C ]"
    light_on ${TEMP_LED}
  else
    [[ $VERBOSE ]] && [[ verbosity -ge 3 ]] && \
      /usr/bin/logger -p cron.notice "${PROG_NAME} success -- CPU Temp: ${int_temp} C [ < threshold: ${temp_threshold} C ]"
    light_off ${TEMP_LED}
  fi
  sleep 30
done
